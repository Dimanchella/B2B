Функция СимволыПСВК() Экспорт
    // XXX
    // \r - cr=0xd=13 (caret return) return Символы.ВК 
    // \n - lf=0xa=10 (line feed) new line Символы.ПС
    //Возврат Символы.ПС + Символы.ВК;
    //Возврат Символы.ВК + Символы.ПС; 
    Возврат Символы.ПС; 
КонецФункции
	

Функция ПолучитьНастройку_ВидЦены() Экспорт
	Возврат ПолучитьНастройку(Перечисления.web_ВидыНастроек.ВидЦены);	
КонецФункции

Функция ПолучитьНастройку_АдресПортала() Экспорт
	Возврат ПолучитьНастройку(Перечисления.web_ВидыНастроек.АдресПортала);	
КонецФункции  

Функция ПолучитьНастройку_ЗащищенноеСоединение() Экспорт
	Возврат ПолучитьНастройку(Перечисления.web_ВидыНастроек.ЗащищенноеСоединение);	
КонецФункции

Функция ПолучитьНастройку_Порт() Экспорт
	Возврат ПолучитьНастройку(Перечисления.web_ВидыНастроек.Порт);	
КонецФункции

Функция ПолучитьНастройку_Токен() Экспорт
	Возврат ПолучитьНастройку(Перечисления.web_ВидыНастроек.Токен);	
КонецФункции

Функция ПолучитьНастройку_ВидКИEmail() Экспорт 
	Возврат ПолучитьНастройку(Перечисления.web_ВидыНастроек.ВидКИEmail);
КонецФункции
	

Функция ПолучитьНастройку(ВидНастройки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	web_Настройки.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.web_Настройки КАК web_Настройки
		|ГДЕ
		|	web_Настройки.ВидНастройки = &ВидНастройки";
	
	Запрос.УстановитьПараметр("ВидНастройки", ВидНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Значение = ВыборкаДетальныеЗаписи.Значение;
	
	Возврат Значение;
КонецФункции


Функция ОтправитьНаСайт(СсылкаНаОбъект, ПолнаяВыгрузка) Экспорт
	ТипЗначения = ТипЗнч(СсылкаНаОбъект);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	ИмяИзМетаданных = ОбъектМетаданных.Имя;
	
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда    	
		Возврат Справочники[ИмяИзМетаданных].ОтправитьНаСайт(СсылкаНаОбъект, ПолнаяВыгрузка);
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат Документы[ИмяИзМетаданных].ОтправитьНаСайт(СсылкаНаОбъект, ПолнаяВыгрузка);	
	КонецЕсли; 
КонецФункции


Процедура ЗаписатьЗависимыеСсылкиПоОбъекту(СсылкаНаОбъект, СписокПриемник, МаксимальныйПриоритет = 0) Экспорт
	//
	//
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (СписокПриемник.Получить(СсылкаНаОбъект) = Неопределено) Тогда
		Приоритет = СписокПриемник.Получить(СсылкаНаОбъект);
		МаксимальныйПриоритет = ?(Приоритет > МаксимальныйПриоритет, Приоритет, МаксимальныйПриоритет);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	web_СписокОбменаССайтом.СсылкаНаОбъект КАК СсылкаНаОбъект,
		|	web_СписокОбменаССайтом.ПриоритетВыгрузки КАК ПриоритетВыгрузки
		|ИЗ
		|	РегистрСведений.web_СписокОбменаССайтом КАК web_СписокОбменаССайтом
		|ГДЕ
		|	web_СписокОбменаССайтом.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	                
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		МаксимальныйПриоритет = ?(
			Выборка.ПриоритетВыгрузки > МаксимальныйПриоритет, 
			Выборка.ПриоритетВыгрузки, 
			МаксимальныйПриоритет
		);
		Возврат;
	КонецЕсли;
			
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаНаОбъект));
	ИмяИзМетаданных = ОбъектМетаданных.Имя;
	
	СвязанныеСсылки = Новый Соответствие;
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда    	
		СвязанныеСсылки = Справочники[ИмяИзМетаданных].ПолучитьСвязанныеСсылки(СсылкаНаОбъект);
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		СвязанныеСсылки = Документы[ИмяИзМетаданных].ПолучитьСвязанныеСсылки(СсылкаНаОбъект);	
	КонецЕсли;
	
	Для Каждого Элемент Из СвязанныеСсылки Цикл
		МаксимальныйПриоритет = ?(Элемент.Значение > МаксимальныйПриоритет, Элемент.Значение, МаксимальныйПриоритет);
		СписокПриемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
КонецПроцедуры

Функция ДобавитьЗначение(ТекущееЗначение, ОбязательноеЗначение = Ложь, ПреобразоватьЧислоВСтроку = Ложь) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекущееЗначение) Тогда
		Если ОбязательноеЗначение Тогда
			ВызватьИсключение СтрШаблон("Недостаточно данных для отправки объекта.") ; 	
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ТекущееЗначение) = Тип("Строка") Тогда
		Возврат СокрЛП(ТекущееЗначение);	
	КонецЕсли;
	
	Если ТипЗнч(ТекущееЗначение) = Тип("Число") Тогда
		Если ПреобразоватьЧислоВСтроку Тогда
			Возврат Формат(ТекущееЗначение, "ЧРД=2; ЧРГ=; ЧГ=0")
		Иначе 			
			Возврат ТекущееЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ТекущееЗначение) = Тип("Дата") Тогда
		Возврат Формат(ТекущееЗначение, "ДФ=yyyy-MM-dd")	
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ТекущееЗначение));
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда    	
		Возврат XMLСтрока(ТекущееЗначение);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции


Процедура Трассировка(Данные, УбратьРазделитель=Ложь) Экспорт
	//
	//	Трассировка исполнения.
	//	Процедура записывает переданные данные в файл трассировки.
	//	Перечисление:  web_ВидыНастроек
	//	Параметры:
	//		Трассировка -- (Строка) маршрут к выходному файлу
	//		Трассировка Включена -- (Булеан) трассировка Включена (Да)/ выключена (Нет)
	//
	//	Аргументы:
	//		Данные -- (Строка) данные для записи в файл
	//		УбратьРазделитель -- (Булеан) удалить разделитель "-" (UID)
	//
	Если НЕ ПолучитьНастройку(Перечисления.web_ВидыНастроек.ТрассировкаВключена) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКТрассе = ПолучитьНастройку(Перечисления.web_ВидыНастроек.Трассировка);	
	КодировкаФайла = КодировкаТекста.UTF8;
	РазделительСтрок = Символы.ВК + Символы.ПС;
	РазделительСтрокВФайле = Символы.ВК + Символы.ПС;
	ФайлТрассировки = Новый ЗаписьТекста(ПутьКТрассе, КодировкаФайла, РазделительСтрок, Истина, РазделительСтрокВФайле);
	ДанныеДляВывода = Строка(Данные)+Символы.ПС;
	Если УбратьРазделитель Тогда
		ДанныеДляВывода = СтрЗаменить(ДанныеДляВывода, "-", "");	
	КонецЕсли;
	ФайлТрассировки.Записать(ДанныеДляВывода);
	ФайлТрассировки.Закрыть();
	
КонецПроцедуры
